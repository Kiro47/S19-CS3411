Programming Assignment 5
Chat Server and Client

In this project, we will develop a simple chat server and clients for it called cserver and cclient. cserver will expect conecctions from cclients. Once connected, the server will receive chat messages from connected clients and distribute them to all the other connected clients, which will display it to the user.

usage :

   cserver
        -- Runs the server and prints the port
   cclient <address> <port> <nickname>

The chat server will listen for connections from chat clients. After connecting, a client will inform the server of a nickname to identify itself. Duplicate nicknames are allowed. After the introduction, clients receive messages from the server and send messages to the server. Finally, a client may send a quit message to the server when terminating. The server doesn't need to detect if a client improperly disconnects.

You will need to come up with a protocol to communicate messages between the server and the client. You may design this protocol however you want. As a hint, I would suggest first sending some message headers that describe the intent and the content of your messages. For instance, you could begin your messages with a byte that is set to 0 for connection messages, 1 for text messages and 2 for quit requests. Then you could follow up with your message size, then the message body. Note that this is a sample protocol and you're free to use any other protocol if you wish, or expand this protocol.

The server should be able to support at least 5 separate chat clients. The client that sent a message shouldn't receive a copy of it from the server. For instance, if there are 4 clients to connected to the server, and client 2 sends a message to the server, only clients 1, 3 and 4 should receive that message. You should consider spawning new processes to transmit messages to new clients. Managing everything with a single process is also a valid option, and may be simpler!

Chat messages should not be any longer than 128 characters including the null terminator. Clients should display messages prefixed by the nickname they came from. For instance, if the user with the nickname "User1" sends a message "Hello there!", the following should be output on other clients:

<User1> Hello there!

To make your chat client more usable, you should think about ways to stop output from blocking the screen when the user is typing their own message. This feature is optional (and may be very time consuming to implement, so make sure you only attempt it after completing the rest of the feature set) and will provide you with extra credit.
Ground Rules and Restrictions

    You need to use INET stream connections to complete this assignment.

    No standard I/O library functions may be used, with the exception of the ones which do not perform I/O such as sprintf, sscanf, etc. In other words, all I/O must be done with kernel calls, read, write, close and so on.

    You may not exec any variant of sh nor can you use the system() or popen() system calls.

    Your server must obtain a random port from the operating system by passing 0 as a port to bind, then printing it out.

    Your server must maintain the same listening socket for multiple connections. Creating a new listen socket every time a new connection is accepted is not allowed. More specifically, your program must listen on the port it acquired at the start of its execution throughout its lifetime.

Grading

Your program should implement at least part of this functionality correctly to get any points. The criteria is given below:

    Server program successfully creates a socket and listens for connections.

    Client program successfully connects to a host/port pair.

    Server can accept multiple successive connections

    Server distributes messages to all clients successfully

    A client can quit and a new one can connect while the server keeps operating successfully

    (Extra credit!) Clients take preventative measures to stop messages from disturbing the user's message typing. Warning: May be very time consuming to implement!

Submission Requirements

Your submission must be written in C.

Use Canvas to submit a tar file named <yourfile>.tgz that contains:

    A copy of the source with comments.

    A makefile with all, cserver, cclient, and clean.

    A README file which describes what works and what does not.

    A file named TESTS in the main project directory that contains a description of the test cases you executed against the code to verify correct operation.

When I execute the commands: tar zxf <yourfile>.tgz; make against your submission, executables named cserver and cclient should be created in the current directory.
