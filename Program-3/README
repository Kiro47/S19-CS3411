Programming Assignment 3
File Sorter
Summary

In this project, we will develop a program to create sorted versions of given argument files. You will learn how to:

    Create UNIX processes and manage them
    Execute new processes and wait for completion
    Use some new functions and commands by reading their manual pages

The Program

The usage information of the program is given below.

To sort any number of files into the SORTED directory :

asort <file1> <file2> <file3> ... <filen>

This program will create a directory named SORTED if it doesn't
exist, and place the sorted versions of all arguments in that
directory.

Program Execution Details

In this project, you are asked to develop a program that will sort a given set of files and write the sorted files into a new directory called SORTED. Your program should fork and exec system sort program for each of the files. The program executable will be called asort. Argument to the program consists of the names of the files to be sorted. For example:

asort myfile.txt herfile.txt hisfile.txt theirfile.txt

should fork four processes and each should exec sort (a program that exists on most UNIX systems) by passing appropriate parameters. At the end of the execution, the directory SORTED should contain the sorted versions of the given files (with the same names). Note that you will not be writing your own sort program, you will be using the one provided by the system!

The execution should follow the below pattern:

    You do not need to examine the contents of the files to be sorted, nor check whether the specified file exists. Just pass the arguments to the sort program.
    Check to see if the SORTED directory exists. Create it if it does not exist.
    If the target file already exists in the SORTED directory overwrite/erase it. You may rely on sort to do this.
    The asort program (i.e., the parent) should wait for the completion of all its children and collect the return values and report them on the standard output. For the above example, the output would be :

myfile.txt : success (0)
herfile.txt : success (0)
hisfile.txt : fail (2)
theirfile.txt : success(0)
3 out of 4 files successfully sorted!

In this example, the sort for hisfile.txt returned a non-zero value (i.e., 2), perhaps because the file does not exist. If all processes completed normally write a message that says "All files successfully sorted." as the last line of output. You should suppress any standard or error terminal output from the sort program itself. Consider pointing each child process' file descriptors 1 and 2 to /dev/null.
Compiling Files

You should be using a Makefile to compile your program. Please make use of your experience with previous assignments to create one.
Restrictions

    You may NOT use any stdio functions (no printf, scanf, etc.) in your final submission EXCEPT sprintf and sscanf
    You may generally use other library functions
    You MUST use a variant of exec() (execve(), execl(), execlp() etc.)
    If you have any doubts about what functions you can use, please e-mail me!

Error Checking

Your program should check for all possible errors and gracefully fail (i.e. not crash) when an unexpected error occurs. Here are some sample errors you should definitely check for:

    Return values from fork() and exec() variants
    Return values of wait()
    Return values from all other kernel calls
    No memory leaks

Note that this list is not exhaustive. Your program should not crash unexpectedly (quitting because of a user interruption or a signal is fine). You do not need to protect against file corruption if you encounter an unanticipated I/O error.

For memory leaks: Program defensively. Do not allocate anything that you don't need, and free memory locations immediately after you're done using them. Don't leave it for later - that's what causes memory leaks. You can use the tool valgrind to check for memory leaks. Run your program like so:

valgrind ./asort ....

This will tell you if your program has any memory leaks or incorrect accesses. Your program should report 0. Suppressed errors are fine.
Hints

    Make use of the sprintf() function - with write() and strlen(), it'll be easy to print messages to the terminal.
    Don't forget lseek() exists!
    Don't get lost in error checking code, the majority of your score will come from the implementation.
        Do the error checking for the system calls as you write them.
        Assume you have correct inputs while testing your programs. You can check for duplicate file errors etc. once you're finished with the program.
    Follow the recommendations below for implementation hints:
        First experiment with the sort program (/usr/bin/sort or /bin/sort). Pass it a text file and play with it. Make yourself familiar with its arguments and options.
        Next develop a simple program that prints its arguments. Test it to make sure that it works correctly. This is your asort.c for now. Your program should issue an appropriate error message if no arguments are passed.
        Modify your program so that it checks for the SORTED directory to see if it exists and create it if it does not. You may want to check the manual pages for opendir and mkdir. Once the directory is created, cd to that directory in your terminal and create a file there to make sure that all permissions for the directory were correctly set-up. If not, delete the directory and modify your program until you get the directory permissions right.
        Write a small test program which prepares the set of arguments for the sort program and calls execve (or other exec variant) to run the sort program. You can pass -o flag to the sort program so that the sorted file is written to a file. Make sure that this test program correctly sorts a given file, either hard-coded or passed as an argument and writes it to a file with the same name in the SORTED directory.
        Now modify your asort.c so that it forks as many processes as the number of arguments, each sleeps for some seconds. Make the main thread wait for all its children using wait system call. You can make each child return its PID after the sleep expires and exit. As each child finishes, collect the return values and print it. Can you correctly collect the return values?
        Once the above step is complete, combine the two programs by executing execve system call to run sort.
        Test your program with one argument first, then test it with different number of arguments.
        Test your program with various combinations of files of varying sizes

Submission Requirements

I will expect a .tgz (tar gz) file with the following contents:

    A copy of the source files with comments
    A Makefile with rules all and clean
    A directory named TESTS in the main project directory containing any sample files you tested your submission with

When I execute the commands: "tar -xzvf yourfile.tgz; make" against your submission, an executable named asort should be created in the current directory. The tar file can be created by executing the command "tar -cvzf <yourfilename>.tgz *" from the directory containing your Makefile and final program code. Make sure your submission unpacks and compiles correctly before you submit.
